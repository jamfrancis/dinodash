pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- ui and data setup
BORDER_PADDING = 8
TOP_UI_HEIGHT = 16
cartdata("ddash")  -- load persistent storage
difficulty = "normal"
high_score_normal = dget(0)
high_score_hard = dget(1)
state = "start"

-- initial setup
function _init()
	state = "start"
end

-- starts or restarts the game
function _start_game()
	game_setup()
	make_player()
	make_key()
	make_lock()
	dinos = {}
end

-- main update loop
function _update()
	if state == "start" then
		-- toggle difficulty
		if btnp(0) or btnp(1) then
			difficulty = (difficulty == "normal") and "hard" or "normal"
		-- start game
		elseif btnp(5) then
			state = "play"
			_start_game()
		end
		return
	end

	frames += 1
	check_collection()
	check_lock_collection()
	
	if not game_over then
		move_player()
		move_dino()
		check_dino_collision()
	end

	-- game over options
	if game_over then
		if btnp(5) then
			_start_game()
		elseif btnp(4) then
			state = "start"
		end
	end
end

-- main draw loop
function _draw()
	if state == "start" then
		cls()
		print("dino", 44, 20, 11)
		print("dash", 61, 20, 10)
		print("select difficulty", 25, 40, 7)
		print("normal", 20, 60, difficulty == "normal" and 11 or 6)
		print("hard", 80, 60, difficulty == "hard" and 8 or 6)
		print("press x to start", 25, 90, 7)
		return
	end

	cls()
	draw_border()
	draw_player()
	draw_dino()
	draw_other()
	print("score:"..score, 1, 1, 7)

	if game_over then
		rectfill(0, 40, 127, 87, 1)
		print("game over!", 45, 42, 7)
		print("score: "..score, 20, 55, 7)
		local current_high = (difficulty == "hard") and high_score_hard or high_score_normal
		print("high: "..current_high, 79, 55, 7)
		print("press x to play again", 25, 70)
		print("z/0 to change difficulty", 16, 79, 7)
	end
end
-->8
-- initialize game state
function game_setup()
	score = 0
	game_over = false
	collected = false
	frames = 0
end

-- create player at random position
function make_player()
	player={}
	player.x = BORDER_PADDING + flr(rnd(128 - BORDER_PADDING * 2))
	player.y = TOP_UI_HEIGHT + flr(rnd(128 - TOP_UI_HEIGHT - BORDER_PADDING))
	player.alive = true
	player.right = 2
	player.left = 4
	player.mid = 3
	player.now = 1
	player.move = false
	player.swap = 200
end

-- update player sprite direction
function walk(direction)
	player.now = direction
end

-- create collectible key at random position
function make_key()
	key = {}
	key.x = BORDER_PADDING + flr(rnd(128 - BORDER_PADDING * 2))
	key.y = TOP_UI_HEIGHT + flr(rnd(128 - TOP_UI_HEIGHT - BORDER_PADDING))
end

-- create lock at random position
function make_lock()
	lock = {}
	lock.x = BORDER_PADDING + flr(rnd(128 - BORDER_PADDING * 2))
	lock.y = TOP_UI_HEIGHT + flr(rnd(128 - TOP_UI_HEIGHT - BORDER_PADDING))
	lock.dino = false
end

-- add new dino enemy
function make_dino()
	new_dino = {}
	new_dino.x = BORDER_PADDING + flr(rnd(128 - BORDER_PADDING * 2))
	new_dino.y = TOP_UI_HEIGHT + flr(rnd(128 - TOP_UI_HEIGHT - BORDER_PADDING))
	new_dino.speed = (difficulty == "hard") and 1.0 or 0.5
	new_dino.last_move_x = 0
	add(dinos, new_dino) 
end

-- handle player movement and animation
function move_player()
	local moved_x = false
	local moved_y = false

	if btn(0) then
		player.x -= 1
		walk(player.left)
		moved_x = true
	end
	if btn(1) then
		player.x += 1
		walk(player.right)
		moved_x = true
	end
	if btn(2) then
		player.y -= 1
		moved_y = true
	end
	if btn(3) then
		player.y += 1
		moved_y = true
	end

	-- swap sprite every few frames
	if moved_x or moved_y then
		player.swap -= 1
		if player.swap <= 0 then
			player.move = not player.move
			player.now = player.move and player.now or player.mid
			player.swap = 7
		end
	else
		player.now = spr(1, player.x, player.y)
		player.swap = 7
		player.move = false
	end

	-- keep player within bounds
	player.x = mid(BORDER_PADDING, player.x, 128 - BORDER_PADDING - 8)
	player.y = mid(TOP_UI_HEIGHT, player.y, 128 - BORDER_PADDING - 8)
end

-- draw player sprite based on movement
function draw_player()
	if game_over then
		spr(032, player.x, player.y)
	elseif btn(0) or btn(1) then
		spr(player.move and player.now or player.mid, player.x, player.y)
	else
		spr(1, player.x, player.y)
	end
end

-- move dino(s) toward player and avoid overlap
function move_dino()
	if dinos then
		for i, dino in ipairs(dinos) do
			local move_x = 0
			local move_y = 0

			if dino.x < player.x then dino.x += dino.speed move_x = 1
			elseif dino.x > player.x then dino.x -= dino.speed move_x = -1 end

			if dino.y < player.y then dino.y += dino.speed move_y = 1
			elseif dino.y > player.y then dino.y -= dino.speed move_y = -1 end

			if move_x ~= 0 then dino.last_move_x = move_x end

			-- dino separation
			for j, other in ipairs(dinos) do
				if j ~= i then
					local dx = dino.x - other.x
					local dy = dino.y - other.y
					local dist = sqrt(dx * dx + dy * dy)
					if dist < 8 then
						local push = 0.5
						dino.x += (dx / dist) * push
						dino.y += (dy / dist) * push
					end
				end
			end
		end
	end	
end

-- draw dino sprite facing direction
function draw_dino()
	if dinos then
		for _, dino in ipairs(dinos) do
			if dino.last_move_x > 0 then
				spr(34, dino.x, dino.y)
			elseif dino.last_move_x < 0 then
				spr(33, dino.x, dino.y)
			end
		end
	end
end

-- draw lock and key visuals
function draw_other()
	if lock and lock.dino then
		spr(019, lock.x, lock.y)
	else
		spr(018, lock.x, lock.y)
	end

	if not collected then
		spr(017, key.x, key.y)
		spr(020, 120, 1)
	else
		spr(000, key.x, key.y)
		spr(017, 120, 1)
	end
end

-- draw border based on difficulty
function draw_border()
	local spr_border = (difficulty == "hard") and 21 or 16
	for i = 0, 15 do
		spr(spr_border, i * 8, 8)
		spr(spr_border, i * 8, 120)
		spr(spr_border, 0, (i+1) * 8)
		spr(spr_border, 120, (i+1) * 8)
	end
end
-->8
-- check if player collected the key
function check_collection()
	local dx_key = key.x - player.x
	local dy_key = key.y - player.y
	local distance = sqrt(dx_key * dx_key + dy_key * dy_key)

	if distance < 8 then  -- key is within reach
		collected = true
	end
end

-- check if player unlocked the lock (after collecting key)
function check_lock_collection()
	if collected then
		local dx_lock = lock.x - player.x
		local dy_lock = lock.y - player.y
		local distance_lock = sqrt(dx_lock * dx_lock + dy_lock * dy_lock)

		if distance_lock < 8 then
			local is_dino_lock = false  -- will spawn dino if true
			if lock and lock.dino then
				is_dino_lock = true
			end

			make_key()
			score += 1
			collected = false

			-- spawn new dino if previous lock was a dino lock
			if is_dino_lock then
				local new_dino = {}
				new_dino.x = flr(rnd(127))
				new_dino.y = flr(rnd(127))
				new_dino.speed = 0.5
				new_dino.last_move_x = 0
				add(dinos, new_dino)
			end

			make_lock()

			-- decide if the new lock becomes a dino lock
			lock.dino = false
			if difficulty == "hard" or (score > 0 and rnd() < 0.5) then
				lock.dino = true
			end
		end
	end
end

-- check if player collided with any dino
function check_dino_collision()
	for _, dino in ipairs(dinos) do
		local dx_dino = dino.x - player.x
		local dy_dino = dino.y - player.y
		local distance_dino = sqrt(dx_dino * dx_dino + dy_dino * dy_dino)

		if distance_dino < 8 and player.alive then
			game_over = true
			player.alive = false

			-- update high score if current score is higher
			if score > (difficulty == "hard" and high_score_hard or high_score_normal) then
				if difficulty == "hard" then
					high_score_hard = score
					dset(1, high_score_hard)
				else
					high_score_normal = score
					dset(0, high_score_normal)
				end
			end
		end
	end
end
__gfx__
00000000000000000000000000000000000000004f4f444f00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000777000007770000077700000777000444f4ff400000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000777000007770000077700000777000f44444f400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077777000077700000777000007770004f44f4f400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077777000077700000777000007770004f4f444400000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000707000007007000007000007007000444f4ff400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007070000700070000070000070007004f4f4f4400000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000ff44ff4f00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007fa00000fff000008b800000ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007000a000f000f000b000b000d000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000070009000f000a0008000a000d000d000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000ff9000fa999af0ba999a8000ddd0000080080000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000a0000a99099a0a93339a0000d00000080080000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000a90009990999093030390000dd0000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000a00004999994049333940000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000009a0000444440004444400000dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000033338000083333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000303030000003030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700333338000083333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0700707000bb30000003bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0707007003b3380000833b3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000bb30033003bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000bb33300333bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000003030000003030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000070000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
c50901010c0500e0500e0500c0570c0500c05000000000000000000000000000000000000000000f0570000000000000000f05700000000000000000000000000f057000000000000000000000f0570000000000
00100100170501c057000001c05000000000002205000000000000000023050000000000000000000002905000000000000000000000000000000000000000000000021050000000000000000000000000000000
__music__
00 0d424344
00 02424344

